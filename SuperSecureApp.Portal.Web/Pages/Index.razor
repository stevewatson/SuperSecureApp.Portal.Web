@page "/"
@attribute [Authorize]

@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SuperSecureApp.Portal.Web.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider AccessTokenProvider
@inject AccessTokenService AccessTokenService



<PageTitle>Index</PageTitle>

<h1>Hello, @authenticationState?.Result?.User?.Identity?.Name</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<AuthorizeView>
    <Authorized>
        <div>The user is currently authorized</div>
    </Authorized>
    <NotAuthorized>
        <div>The user is <b>NOT</b> authorized</div>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="superdog">
    <Authorized>
        <div>The user has the <b>SUPERDOG</b> role</div>
    </Authorized>
</AuthorizeView>


@code
{
    [CascadingParameter] private Task<AuthenticationState> authenticationState{ get; set; }
    List<Claim> UserClaims { get; set; } = new List<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // Handle not authenticated scenario, maybe navigate to a login page
            Console.WriteLine("++++++ User is NOT authenticated ++++++");
        }
        else
        {
            Console.WriteLine("++++++ User is authenticated ++++++");

            var username = user.Identity.Name;
            Console.WriteLine($"Username [{username}]");

            // Lets get the principle claims
            var claimsIdentity = user.Identity as ClaimsIdentity;
            if (claimsIdentity != null)
            {
                Console.WriteLine($"There are {claimsIdentity.Claims.Count()} total claims associated to this user");
                foreach (var claim in claimsIdentity.Claims)
                {
                    var claimType = claim.Type;
                    var claimValue = claim.Value;
                    Console.WriteLine($"   {claimType} = {claimValue}");
                }
            }

            // todosgw: Get the token directly from the provider instead of using 'AccessTokenService.GetAccessTokenAsync()'
            // var tokenResult = await AccessTokenProvider.RequestAccessToken();
            // var token = tokenResult.TryGetToken(out var accessToken);
            // Console.WriteLine($"Your token status: {tokenResult?.Status}, success: {token}, value: {accessToken?.Value}");


            // todosgw: Set a new role onto an existing user who is logged in, this is for development purposes only while
            //          developing layouts.
            Console.WriteLine("----------------------------------- ADD A ROLE FOR DEVELOPMENT PURPOSES ------------------------------");
            UserClaims = user.Claims.ToList();
            var userClaims = (user.Identity as ClaimsIdentity).Claims.ToList();
            var roleClaim = new Claim(ClaimTypes.Role, "superdog");
            userClaims.Add(roleClaim);
            var identity = new ClaimsIdentity(userClaims, user.Identity.AuthenticationType);
            (user.Identity as ClaimsIdentity).AddClaims(identity.Claims);

            


            Console.WriteLine("------------------------------------------- FROM DI SERVICE ------------------------------------------");
            var tokenResult = await AccessTokenService.GetAccessTokenAsync();
            Console.WriteLine(tokenResult);

            /*var roles = claimsIdentity?.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            Console.WriteLine($"There are {roles?.Count()} roles available with this user");
            if (roles != null)
            {
                foreach (var role in roles)
                {
                    Console.WriteLine($"{role}");
                }
            */
            
        }
    }
}
